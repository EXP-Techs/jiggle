// Code generated by trpc-gen-go. DO NOT EDIT.
// source: user.v1.trpc

package user_v1

import "context"

// ========== Message Definitions ==========

type User struct {
	UserId    string `json:"user_id"`
	Name      string `json:"name"`
	Email     string `json:"email"`
	IsActive  bool   `json:"is_active"`
	CreatedAt int64  `json:"created_at"`
}

type GetUserRequest struct {
	UserId string `json:"user_id"`
}

type CreateUserRequest struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UpdateUserRequest struct {
	UserId string `json:"user_id"`
	Name   string `json:"name"`
	Email  string `json:"email"`
}

// ========== Service Definitions ==========

// UserServiceServer is the server API for the UserService service.
type UserServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*User, error)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	// HandleUserCreated handles the asynchronous UserCreated event.
	HandleUserCreated(context.Context, *User) error
	// HandleUserUpdated handles the asynchronous UserUpdated event.
	HandleUserUpdated(context.Context, *User) error
	// HandleUserDeleted handles the asynchronous UserDeleted event.
	HandleUserDeleted(context.Context, *GetUserRequest) error
}

// UserServiceClient is the client API for the UserService service.
type UserServiceClient interface {
	// GetUser performs a synchronous RPC call.
	GetUser(ctx context.Context, in *GetUserRequest) (*User, error)
	// CreateUser performs a synchronous RPC call.
	CreateUser(ctx context.Context, in *CreateUserRequest) (*User, error)
	// UpdateUser performs a synchronous RPC call.
	UpdateUser(ctx context.Context, in *UpdateUserRequest) (*User, error)
	// PublishUserCreated publishes the asynchronous UserCreated event.
	PublishUserCreated(ctx context.Context, msg *User) error
	// PublishUserUpdated publishes the asynchronous UserUpdated event.
	PublishUserUpdated(ctx context.Context, msg *User) error
	// PublishUserDeleted publishes the asynchronous UserDeleted event.
	PublishUserDeleted(ctx context.Context, msg *GetUserRequest) error
}
